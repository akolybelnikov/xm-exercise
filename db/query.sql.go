// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (name, description, employee_count, registered, type)
VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateCompanyParams struct {
	Name          string
	Description   pgtype.Text
	EmployeeCount int32
	Registered    bool
	Type          string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.Name,
		arg.Description,
		arg.EmployeeCount,
		arg.Registered,
		arg.Type,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE
FROM company
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, description, employee_count, registered, type
FROM company
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.EmployeeCount,
		&i.Registered,
		&i.Type,
	)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE company
SET name           = $2,
    description    = $3,
    employee_count = $4,
    registered     = $5,
    type           = $6
WHERE id = $1
`

type UpdateCompanyParams struct {
	ID            pgtype.UUID
	Name          string
	Description   pgtype.Text
	EmployeeCount int32
	Registered    bool
	Type          string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.Exec(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.EmployeeCount,
		arg.Registered,
		arg.Type,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :one
SELECT id, username, password, email, company_id
FROM users
WHERE username = $1
  AND password = crypt($2, password) LIMIT 1
`

type VerifyUserParams struct {
	Username string
	Crypt    string
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) (User, error) {
	row := q.db.QueryRow(ctx, verifyUser, arg.Username, arg.Crypt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CompanyID,
	)
	return i, err
}
